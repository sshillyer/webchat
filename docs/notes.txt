Plan: 
	Write back end first
		Routes for a post to /login and /message
		Use websockets library
		Uses ws library to receive the message and then broadcast it back out
	Write front end next
		Uses react

Hickups:
	Installing/setting up TypeScript (Node on this laptop old version)
	Using REACT for front end


Tutorials: 
	http://brianflove.com/2016/11/08/typescript-2-express-node/

	https://inviqa.com/blog/using-typescript-node-js



// CITE: https://www.codeproject.com/articles/871622/writing-a-chat-server-using-node-js-typescript-and


Updating node: https://docs.npmjs.com/getting-started/installing-node

npm install npm@latest -g

############
Setting up:
############
npm init  # done
npm install typescript --save-dev
tsc --init   // Adds a tsconfig.json file
	// update compilerOptions: to have a "outDir": "build"   line
npm install -g typings  // or --save-dev if can't use -g flag
typings init
typings install dt~node --save --global
typings install dt~es6-shim --save --global
typings install dt~express --save --global
typings install dt~serve-static --save --global
typings install dt~express-serve-static-core --save --global
typings install dt~mime --save --global
typings install --save react --global
typings install --save react-dom --global

Install express
	npm install express --save

Install nodemon
	npm install nodemon -g nodemon

put the app files in own folder (app):
	make a file called app/server.ts inside there
	contollers folder and file?

Install REACT
	npm install --save react react-dom
Also install react Typings:

	

--React page suggests I might want to install Babel -- Do I need if writing in TypeScript? TS already targeting ES5 in tsconfig.json

websockets libary??
	npm install --save ws

Make sure our compiled JS goes into a /build folder
TS goes into /src
/declarations --> used to declare third party modules. There are some available at DefinitelyTyped project page (https://github.com/borisyankov/DefinitelyTyped)




# Data model
Don't need DB, running in-memory
Can set up a data model as a close:


class Message {
	user: string;
	message: string;

	constructor...
		// accepts the payload, parses the json and assigns it to user and message

}





Also on the back end we need to write the server

import the models, require in the websocket module, and set up the server on a port (process.env.PORT || 3000) 



launc the server

On a connection (server.on('connection'))) we can pass in ws and try to instantiate a new Message, then immediately call a function broadcast(...) and send that message back out

The broadcast function can take the string and iterate through all of the clients and send the data to them


Need to also handle when a connection comes in that's just the username from a login versus when its a post


So need an express template based API:
	a post to /login will be routed by express